name: Documentation Generation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-docs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable

    - name: Generate Rust Documentation
      run: cargo doc --no-deps

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Create Doc Conversion Script
      run: |
        cat > convert_docs.py << 'EOL'
        import os
        import json
        from pathlib import Path
        from jinja2 import Template
        from anthropic import Anthropic
        
        def read_html_files(dir_path):
            # Read files in a deterministic order
            paths = sorted(Path(dir_path).rglob('*.html'))
            contents = []
            for path in paths:
                with open(path, 'r', encoding='utf-8') as f:
                    contents.append({
                        'path': str(path),
                        'content': f.read()
                    })
            return contents

        def convert_documentation(anthropic, prompt):
            """Convert documentation with multiple API calls if needed"""
            full_response = []
            messages = [{
                "role": "user",
                "content": prompt
            }]
            
            while True:
                print(f'Making API call {len(full_response) + 1}...')
                message = anthropic.messages.create(
                    model="claude-3-5-sonnet-20241022",
                    max_tokens=8192,
                    messages=messages
                )
                
                response_text = message.content[0].text
                full_response.append(response_text)
                
                # Check if we hit the max_tokens limit
                if message.stop_reason != "max_tokens":
                    break
                    
                # Add the response and request continuation
                messages.append({"role": "assistant", "content": response_text})
                messages.append({
                    "role": "user", 
                    "content": "Continue the documentation conversion from where you left off. Remember to maintain exact formatting and include all content."
                })
            
            return '\n'.join(full_response)
        
        def main():
            # Read all HTML documentation files
            doc_files = read_html_files('target/doc/simple_mpi')
            
            # Combine all HTML content
            all_docs = '\n\n'.join(f"# File: {Path(f['path']).name}\n{f['content']}" 
                                 for f in doc_files)
            
            # Read the template
            with open('.github/workflows/prompt.jinja', 'r') as f:
                template = Template(f.read())
            
            # Render the template
            prompt = template.render(documentation=all_docs)
            
            # Create docs directory
            os.makedirs('markdown_docs', exist_ok=True)
            
            # Convert to markdown using Claude with multiple calls if needed
            anthropic = Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])
            
            print('Converting documentation to markdown...')
            try:
                markdown_content = convert_documentation(anthropic, prompt)
                
                # Save the markdown
                with open('markdown_docs/documentation.md', 'w') as f:
                    f.write(markdown_content)
                print('Created unified markdown documentation')
                
            except Exception as e:
                print(f'Error converting documentation: {str(e)}')
                raise
        
        if __name__ == '__main__':
            main()
        EOL

    - name: Install Dependencies
      run: pip install anthropic jinja2

    - name: Convert Documentation to Markdown
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: python convert_docs.py

    - name: Upload HTML Documentation
      uses: actions/upload-artifact@v4
      with:
        name: rust-docs-html
        path: target/doc/simple_mpi
        
    - name: Upload Markdown Documentation
      uses: actions/upload-artifact@v4
      with:
        name: rust-docs-markdown
        path: markdown_docs
